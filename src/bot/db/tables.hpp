#pragma once

// generated by /home/max/.conan2/p/sqlpp36f2f4cec0df9/p/bin/ddl2cpp --datatype-file=/dev/fd/63 init.sql tables.hpp tables

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace tables
{
  namespace Sticker_
  {
    struct FileUniqueId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "file_unique_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fileUniqueId;
            T& operator()() { return fileUniqueId; }
            const T& operator()() const { return fileUniqueId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct FileId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "file_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fileId;
            T& operator()() { return fileId; }
            const T& operator()() const { return fileId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace Sticker_

  struct Sticker: sqlpp::table_t<Sticker,
               Sticker_::FileUniqueId,
               Sticker_::FileId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "sticker";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T sticker;
        T& operator()() { return sticker; }
        const T& operator()() const { return sticker; }
      };
    };
  };
  namespace StickerPack_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct OwnerId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "owner_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ownerId;
            T& operator()() { return ownerId; }
            const T& operator()() const { return ownerId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace StickerPack_

  struct StickerPack: sqlpp::table_t<StickerPack,
               StickerPack_::Id,
               StickerPack_::Name,
               StickerPack_::OwnerId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "sticker_pack";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T stickerPack;
        T& operator()() { return stickerPack; }
        const T& operator()() const { return stickerPack; }
      };
    };
  };
  namespace Association_
  {
    struct Text
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "text";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T text;
            T& operator()() { return text; }
            const T& operator()() const { return text; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct StickerId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sticker_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T stickerId;
            T& operator()() { return stickerId; }
            const T& operator()() const { return stickerId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct PackId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pack_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T packId;
            T& operator()() { return packId; }
            const T& operator()() const { return packId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace Association_

  struct Association: sqlpp::table_t<Association,
               Association_::Text,
               Association_::StickerId,
               Association_::PackId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "association";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T association;
        T& operator()() { return association; }
        const T& operator()() const { return association; }
      };
    };
  };
} // namespace tables
