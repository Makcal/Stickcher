services:
  tg-bot:
    build: .
    env_file: ".env"
    environment:
      DB_HOST: db
      TEXT_PARSER_URL: http://scanner:80
    depends_on:
      db:
        condition: service_healthy
      scanner:
        condition: service_started

  db:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db:/var/lib/postgresql/data
      - ./src/bot/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: pg_isready -U ${DB_USER} -d ${DB_NAME}
      interval: 5s
      timeout: 5s
      retries: 5

  scanner:
    image: nginx:latest
    volumes:
      - ./nginx:/etc/nginx/conf.d
    depends_on:
      scanner1:
        condition: service_healthy
      scanner2:
        condition: service_healthy

  scanner1:
    build: ./src/scanner/.
    volumes:
      - easyocr-model:/root/.EasyOCR/model
    healthcheck:
      test: python -c "from http.client import HTTPConnection; conn = HTTPConnection('localhost', 8000); conn.request('GET', '/health'); exit(0 if conn.getresponse().status == 200 else 1)"
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 15s
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  scanner2:
    build: ./src/scanner/.
    volumes:
      - easyocr-model:/root/.EasyOCR/model
    healthcheck:
      test: python -c "from http.client import HTTPConnection; conn = HTTPConnection('localhost', 8000); conn.request('GET', '/health'); exit(0 if conn.getresponse().status == 200 else 1)"
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 15s
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    depends_on:
      scanner1:
        condition: service_healthy

volumes:
  db:
  easyocr-model:

